{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tikz-Python!","text":"<p>Tikz-Python is intended to be an easy-to-use, no-nonsense python package meant to serve as an interface to TikZ code. With Tikz-Python, you can have your beautiful vector graphics and eat it too! (erh, maybe).  </p> <p>Install it below as follows: <pre><code>pip install tikz-python\n</code></pre></p> <p>Want to see some nice examples of what this package can do? See here.</p>"},{"location":"#usage","title":"Usage","text":"<p>Suppose we want to create a sphere. We can achieve this as follows. <pre><code>from tikzpy import TikzPicture  \ntikz = TikzPicture() # Initialize empty canvas\ntikz.circle((0, 0), 3, options=\"thin, fill=orange!15\")\n# Draw two arcs to give 3d-illusion\ntikz.arc((3, 0), 0, 180, x_radius=3, y_radius=1.5, options=\"dashed\")\ntikz.arc((-3, 0), 180, 360, x_radius=3, y_radius=1.5)\ntikz.show()  # Displays a pdf of the drawing to the user\n</code></pre> which produces  </p>"},{"location":"#why-tikz-python","title":"Why Tikz-Python","text":"<p>With Tikz-Python, you generate TikZ code by writing python code. And Python is much nicer than TeX. </p> <ul> <li> <p>Instead of spending a lot of time tediously writing messy, unreadable TikZ code to generate your desired figure,  you can use TikZ-Python to quickly create your figure as a Python script. Your Python code will definitely be much  more modular and extensible than the raw TikZ code you'd end up writing. </p> </li> <li> <p>At any time, you can compile and look at your figure in a sandbox environment by calling <code>TikzPicture.show()</code></p> </li> <li> <p>With a sandbox environment for compilation, compiling will be faster versus you editing and re-compiling your tikz code directly in whatever 100-page document you're working in.</p> </li> <li> <p>Once you're happy with your drawing, you can copy the generated TikZ code and paste it into your LaTeX document. Or, you can  save your code to a file by calling <code>TikzPicture.write(file_destination)</code>.</p> </li> </ul> <p>Additionally, Tikz-Python encodes lines, circles, rectangles, etc. as data structures. These data structures have useful properties and methods that can be used to create other drawings.</p> <p>For example, suppose I want to create a line and two labels at the ends. The code below achieves this <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\nline = tikz.line((0, 0), (1, 1), options=\"thick, blue, o-o\")\nstart_node = tikz.node(line.start, options=\"below\", text=\"Start!\")\nend_node = tikz.node(line.end, options=\"above\", text=\"End!\")\ntikz.show()  # Displays a pdf of the drawing to the user\n</code></pre> which produces   Saving the line as a variable <code>line</code> allows us to pass in <code>line.start</code> and <code>line.end</code> into the node positions, so we don't have to type out the exact coordinates.  This is great, because it makes our code more modular and therefore easier to change. With TikZ alone, you'd need to type out exact coordinates, and update every single one each time you make a minor adjustment to your code.</p> <p>If we were working in an interactive python shell with the code above, we would be able to see that these functions return classes with useful attributes: <pre><code>&gt;&gt;&gt; line.start\n(0,0)\n&gt;&gt;&gt; line.end\n(1,1)\n&gt;&gt;&gt; start_node.text\n\"Start!\"\n</code></pre> Additionally, you can <code>print</code> your tikz object to see the code generated</p> <p><pre><code>&gt;&gt;&gt; print(tikz)\n\\begin{tikzpicture}\n    \\draw[thick, blue, o-o] (0, 0) to (1, 1);\n    \\node[below] at (0, 0) { Start! };\n    \\node[above] at (1, 1) { End! };\n\\end{tikzpicture}\n</code></pre> which you can then use to export to your project.</p>"},{"location":"#background","title":"Background","text":"<p>TikZ is a wrapper of the TeX-based graphics package PGF (see here), and it is commonly used in LaTeX documents to produce beautiful graphics. However, the power of TikZ comes with a tradeoff: it is extremely tedious to use, learn, understand, and iterate on. </p> <p>The main problem with Tikz is that even though Tikz is very powerful, it is often the case that  nonexperts who use TikZ end up producing subpar images.  The reason for this is because of the fact that in order to create beautiful images with TikZ, you also need to deeply understand  LaTeX, TeX, PGF, and the history, bugs, cryptic error messages, and ridiculous quirks (and there are many quirks) of these languages.  This takes years of practice and for the average person this is not realistic or desirable.</p> <p>This can be seen in research papers; even in high quality research papers, the graphics are usually not that great and it totally makes sense why.  It's probably because the authors are too busy being an expert in their own field of work to sit down and read a 1300 page manual on TikZ.</p>"},{"location":"#about","title":"About","text":"<p>I started this project after realizing </p> <ul> <li> <p>most TikZ code is repetitive.</p> </li> <li> <p>TikZ was designed smart; it has an inherent object oriented pattern in its usage which we can exploit and automate.</p> </li> <li> <p>I really hate writing TeX and TikZ code.</p> </li> </ul> <p>I wrote the first version of this as a math undergraduate while writing a large set of notes. As a heavy user of LaTeX, TikZ, PGF, I knew how to design the project to enable efficient development of TikZ code. Then I became a professional software engineer, and I refactored the code to a modern python package while maintaining the original desired goals of the package. </p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#hawaiian-earring","title":"Hawaiian Earring","text":"<p>Suppose I want to draw the Hawaiian Earring. The code below achieves this.  <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\nradius = 5\nfor i in range(1, 60):\nn = radius / i\ntikz.circle((n, 0), n)\ntikz.show()\n</code></pre> and produces   </p> <p>Notice that this code is readable, modular, and therefore easy to experiment with (and compare this with pure TikZ implementations here.)</p>"},{"location":"examples/#circles","title":"Circles","text":"<p>In this example, we use a for loop to draw a pattern of circles. </p> <p>This example  demonstates how Pythons <code>for</code> loop is a lot less messier than the <code>\\foreach</code> loop provided in Tikz via TeX. (It is also more powerful; for example, Tikz with TeX alone guesses your step size, and hence it cannot effectively loop over two different sequences at the same time).</p> <p><pre><code>import numpy as np\nfrom tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\nfor i in np.linspace(0, 1, 30): # Grab 30 equidistant points in [0, 1]\npoint = (np.sin(2 * np.pi * i), np.cos(2 * np.pi * i))\n# Create four circles of different radii with center located at point\ntikz.circle(point, 2, \"ProcessBlue\")\ntikz.circle(point, 2.2, \"ForestGreen\")\ntikz.circle(point, 2.4, \"red\")  # xcolor Red is very ugly\ntikz.circle(point, 2.6, \"Purple\")\ntikz.show()\n</code></pre> The above code then produces</p> <p></p>"},{"location":"examples/#roots-of-unity","title":"Roots of Unity","text":"<p>In this example, we draw the 13 roots of unity. </p> <p>If we wanted to normally do this in TeX, we'd probably have to spend 30 minutes reading some manual about how TeX handles basic math. With Python, we can just use the <code>math</code> library and make intuitive computations to quickly build a function that displays the nth roots of unity. <pre><code>from math import pi, sin, cos\nfrom tikzpy import TikzPicture\ntikz = TikzPicture()\nn = 13 # Let's see the 13 roots of unity\nscale = 5\nfor i in range(n):\ntheta = (2 * pi * i) / n\nx, y = scale * cos(theta), scale * sin(theta)\ncontent = f\"$e^{{ (2 \\cdot \\pi \\cdot {i})/ {n} }}$\"\n# Draw line to nth root of unity\ntikz.line((0, 0), (x, y), options=\"-o\")\nif 0 &lt;= theta &lt;= pi:\nnode_option = \"above\"\nelse:\nnode_option = \"below\"\n# Label the nth root of unity\ntikz.node((x, y), options=node_option, text=content)\ntikz.show()\n</code></pre> Which generates: </p> <p></p> <p>We will see in the examples that follow how imported Python libraries can alllow us to quickly (and efficiently, this is really important) make more sophisticated Tikz pictures. </p>"},{"location":"examples/#neural-network-connection","title":"Neural Network Connection","text":"<p>In this source here, we illustrate the connection between two nodes in a neural network, and mathematically annotate the diagram.  Specifically, we're showing the weight connection node j to node i between layers n-1 and n.</p> <p></p>"},{"location":"examples/#circle-and-line-intersections","title":"Circle and Line Intersections","text":"<p>In the source here, we can use the package to calculate circle and line intersections to recreate this figure from the TikZ manual</p> <p> </p>"},{"location":"examples/#fully-connected-neural-network","title":"Fully Connected Neural Network","text":"<p>the source here, we draw a typical neural network diagram. The code written is very flexible, allowing one to specify the number of nodes in each layer.</p> <p></p>"},{"location":"examples/#des","title":"DES","text":"<p>In the source here, we use a Python function to draw one round of the DES function. We then call this function multiple times to illustrate the multiple rounds that entail the DES encryption algorithm.</p> <p></p>"},{"location":"examples/#geometry-figures","title":"Geometry Figures","text":"<p>In the source here, we recreate this diagram that appeared in a TeX Stack Exchange question. Compare the syntax and readability of this code against the answers provided by the TeX stack exchange community.</p> <p></p>"},{"location":"examples/#transformer-architecture","title":"Transformer Architecture","text":"<p>In the source here, we draw a diagram illustrating the Transformer architecture. This is very similar  to the original diagram from Attention is All You Need. Note we also illustrate the Pre-Layer normalization technique that most implementations of the Transformer use. </p> <p></p>"},{"location":"examples/#general-ven-diagrams","title":"General Ven Diagrams","text":"<p>In the source here, we use the python library <code>itertools.combinations</code> to create a function which takes in an arbitrary number of 2D Tikz figures and colors each and every single intersection. </p> <p>For example, suppose we arrange nine circles in a 3 x 3 grid. Plugging these nine circles in, we generate the image below.</p> <p></p> <p>As another example, we can create three different overlapping topological blobs and then plug them into the function to obtain</p> <p></p> <p>(Both examples are initialized in the source for testing.) As one might guess, this function is useful for creating topological figures, as manually writing all of the <code>\\scope</code> and <code>\\clip</code> commands to create such images is pretty tedious.</p>"},{"location":"examples/#barycentric-subdivision","title":"Barycentric subdivision","text":"<p>In the source here, we create a function that allows us to generate the the n-th barycentric subdivision of a triangle. </p> <p></p>"},{"location":"examples/#cantor-function","title":"Cantor function","text":"<p>In the source here, we plot the Cantor function by performing recursion. It is clear from this TeX Stackexchange question that TeX alone cannot do this, as most answers rely on external programs to generate the data. </p> <p></p>"},{"location":"examples/#symbolic-intergation","title":"Symbolic Intergation","text":"<p>In the source here, we use <code>numpy</code> and <code>sympy</code> to very simply perform symbolic integration. The result is a function which plots and labels the n-order integrals of any function. For example, the output of <code>x**2</code> (the polynomial x^2) generates the image below. </p> <p></p>"},{"location":"examples/#cone-over-a-projective-variety","title":"Cone over a Projective Variety","text":"<p>In the source here, we use <code>numpy</code> to create an image which illustrates the concept of an affine cone over a projective variety. In the case of a curve Y in P^2, the cone C(Y) is a surface in A^3. </p> <p>The image that this drawing was modeled after appears in Exercise 2.10 of Hartshorne's Algebraic Geometry.</p> <p></p>"},{"location":"examples/#lorenz-system","title":"Lorenz System","text":"<p>In the source here, we use <code>numpy</code> and <code>scipy</code> to solve ODEs and plot the Lorenz system. This is made possible since <code>tikz_py</code> also supports 3D. </p> <p></p>"},{"location":"examples/#tikz-styles","title":"Tikz Styles","text":"<p><code>tikzpy</code> supports the creation of any <code>\\tikzset</code>, a feature of Tikz that saves users a great deal of time. You can save your tikz styles in a .py file instead of copying and pasting all the time. </p> <p>Even if you don't want to make such settings, there are useful <code>\\tikzset</code> styles that are preloaded in <code>tikzpy</code>. One particular is the very popular tikzset authored by Paul Gaborit in this TeX stackexchange question. Using such settings, we create these pictures, which illustrate Cauchy's Residue Theorem. The source here produces </p> <p></p> <p>while the source here produces </p> <p></p>"},{"location":"examples/#linear-transformations","title":"Linear Transformations","text":"<p>Recall a 3x2 matrix is a linear transformation from R^2 to R^3. Using such an interpretation, we create a function in the source here which plots the image of a 3x2 matrix. The input is in the form of a <code>numpy.array</code>. </p> <p>For example, plugging the array <code>np.array([[0, 1], [1, 1], [0, 1]])</code> into the source produces </p> <p></p> <p>while plugging the array <code>np.array([[2, 0], [1, 1], [1, 1]])</code> into the source produces </p> <p></p>"},{"location":"examples/#projecting-r1-onto-s1","title":"Projecting R^1 onto S^1","text":"<p>In the source here, we use <code>numpy</code> to illustrate the projection of R^1 onto S^1. Creating this figure in Tex alone is nontrivial, as one must create white space at self intersections to illustrate crossovers. Existing tikz solutions cannot take care of this, but the flexible logical operators of Python allow one to achieve it. </p> <p></p>"},{"location":"examples/#polar-coordinates","title":"Polar Coordinates","text":"<p>In the source here, we illustrate the concept of polar coordiantes by demonstrating how a sine curve is mapped into polar coordinates. This example should be compared to the more complex answers in this TeX Stackexchange question which seeks a similar result. </p> <p></p>"},{"location":"examples/#blowup-at-a-point","title":"Blowup at a point","text":"<p>In the source here, we illustrate the blowup of a point, a construction in algebraic geometry. This picture was created in 5 minutes and in half the lines of code compared to this popular TeX stackexchange answer, which uses quite convoluted, C-like Asymptote code.</p> <p></p>"},{"location":"installation/","title":"Installation","text":"<p>To install Tikz-Python, run <pre><code>pip install tikz-python\n</code></pre> In order to compile your drawings, you need an installation of <code>LaTeX</code>, with PDF and TikZ libraries and latexmk. Unless you decided to customize your LaTeX installation, all of these should already be on your system. </p> <p>If you don't have these on your system, you can of course still use Tikz-Python to generate Tikz code, which you can then take to another system with LaTeX installed to compile on.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This package is meant to have an extremely simple API that also resembles the creation of TikZ code very closely. That is, we aim to minimize \"surprises\" such that users experienced with TikZ can easily use this package. Towards that goal we offer step-by-step tutorials demonstrating this package.</p>"},{"location":"tutorials/#line-and-a-midpoint","title":"Line and a midpoint","text":"<p>Suppose we want to draw a line and a node positioned at the middle of the line.</p> <p></p> <p>According to the TikZ docs, the way you would do this is with the TikZ code below.</p> <pre><code>\\usetikzlibrary {calc}\n\\begin{tikzpicture}\n  \\coordinate [label=left:$A$]  (A) at (0,0);\n  \\coordinate [label=right:$B$] (B) at (1.25,0.25);\n  \\draw (A) -- (B);\n  \\node [fill=red,inner sep=1pt,label=below:$X$] (X) at ($ (A)!.5!(B) $) {};\n\\end{tikzpicture}\n</code></pre> <p>This is great, but it's also not really intuitive. The syntax <code>(X) at ($ (A)!.5!(B) $)</code> is kind of hard to understand and also later  remember. Wouldn't it be nice if instead there was some kind of <code>midpoint</code> function that we could call on lines that we create? </p> <p>In tikz-python, we are able to write code that can draw this more intuitively. The code below also creates the diagram.</p> <pre><code>from tikzpy import TikzPicture\n# Define a canvas to draw on\ntikz = TikzPicture(center=True)\n# Draw a line\nline = tikz.line((0,0), (1.25, 0.25))\n# Draw the nodes\ntikz.node(line.start, options=\"label=left:$A$\")\ntikz.node(line.end, options=\"label=right:$B$\")\ntikz.node(line.midpoint(), options=\"fill=red,inner sep=1pt,label=below:$X$\")\n# Display the drawing\ntikz.show()\n</code></pre> <p>Here, <code>tikz.line</code> draws a line and it returns a Line object. <code>tikz.node</code> draws the nodes. The midpoint is calculated via the method <code>line.midpoint</code>.  Also, note that we used the exact same options that were being used in TikZ. </p> <p>This is more intuitive. It's reasonable to define your graphics in terms of objects, and it's reasonable for a Line object to  have a <code>.midpoint()</code> method, which should return the middle point of the line. Overall, it's much easier to think about graphics as a collection of objects with different properties.  However, a functional/object oriented approach is not possible in TikZ, so the code sometimes isn't intuitive.</p>"},{"location":"tutorials/#logarithmic-branch-cut","title":"Logarithmic Branch Cut","text":"<p>Suppose we desire to create this diagram from mathematics, which illustrates the logarithmic branch cut.</p> <p></p>"},{"location":"tutorials/#axes","title":"Axes","text":"<p>The first thing we can do is create the x and y axes. To do this, we can write the code as below. <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\naxes_len = 4\nx_axis = tikz.line((-axes_len, 0), (axes_len, 0), options=\"Gray!40, -&gt;\")\ny_axis = tikz.line((0, -axes_len), (0, axes_len), options=\"Gray!40, -&gt;\")\n</code></pre> Here, we decide on an axis length, and we use this to create two perpendicular lines. </p> <p>Because of the way we wrote the code, if we change the axis length, we do not have  to change the code controlling the lines.</p>"},{"location":"tutorials/#labels","title":"Labels","text":"<p>Next, we need to add the x-axis and y-axis labels. In TikZ, you would do this with a <code>\\node</code> object. TikzPy implements  node objects. For this example, we can do <pre><code>tikz.node(x_axis.end - (0.3, 0.3), text=\"$x$\")\ntikz.node(y_axis.end - (0.3, 0.3), text=\"$iy$\")\n</code></pre></p> <p>Notice we are specifying the position of each node by accessing the <code>.end</code> attribute of each respective <code>Line</code> object, and then shifting it. This is possible because <code>Line</code> objects have <code>.start</code> and <code>.end</code> attributes that return coordinates. Thus, we are not hardcoding or guessing where to put the nodes. </p> <p>If we change the line (e.g. adjust its length), we do not have to change this code.</p> <p>All together we now have this.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\naxes_len = 4\n# x,y axes\nx_axis = tikz.line((-axes_len, 0), (axes_len, 0), options=\"Gray!40, -&gt;\")\ny_axis = tikz.line((0, -axes_len), (0, axes_len), options=\"Gray!40, -&gt;\")\n# axes labels\ntikz.node(x_axis.end - (0.3, 0.3), text=\"$x$\")\ntikz.node(y_axis.end - (0.3, 0.3), text=\"$iy$\")\ntikz.show()\n</code></pre> <p>This code generates the graphic below. </p> <p></p> <p>Again, because of the way we wrote the code, if we change the axis length, or even change the lines themselves,  we do not have to do anything else; the nodes will move automatically. </p>"},{"location":"tutorials/#cut-branch","title":"Cut branch","text":"<p>Next, let's add the \"Cut\" branch. We achieve this with one <code>Line</code> object and one <code>Node</code> object to put in the word \"Cut\".</p> <pre><code># Cut branch\norigin = (0, 0)\ncut_line = tikz.line((-axes_len, 0), origin, options=\"thick\")\ntikz.node(cut_line.midpoint(), text=\"Cut\", options=\"above\")\n</code></pre> <p>The cut <code>Line</code> is dependent on <code>axes_len</code> value. The <code>Node</code> object is positioned via  <code>Line.midpoint()</code>, a method which calculates the middle of the line. Thus, if we change the length of our line, we do not  have to also change node's position. This saves us time. </p> <p>This so far generates </p> <p></p>"},{"location":"tutorials/#line-from-origin","title":"Line from origin","text":"<p>Next, let's add the line from the origin and annotate it. Again, we achieve this with a <code>Line</code> and a <code>Node</code> object. </p> <pre><code># Line from origin\nline = tikz.line(origin, (axes_len / 3, axes_len / 3), options=\"-o\")\ntikz.node(line.end + (0.7, 0), text=\"$z = re^{i\\\\theta}$\", options=\"above\")\n</code></pre> <p>In the code above, we draw 45-degree angled line from the origin to the point <code>(axes_len / 3, axes_len / 3)</code>.  The denominator <code>3</code> is pretty arbitrary and subjective, and can be changed if the user likes.  For our node, we use the <code>Line.end</code> attribute to specify the position and shift it to the right a bit by 0.7. We then shift it up by specifying <code>options=above</code>, as one normally would in TikZ.</p> <p>This then generates </p> <p></p>"},{"location":"tutorials/#angle-arc","title":"Angle arc","text":"<p>Finally, we draw the dashed-angle. To achieve this we can use an <code>Arc</code> object and one <code>Node</code> object. </p> <pre><code># Angle arc\nfrom tikzpy import Point\narc_start = Point(1, 0)\ntikz.arc(arc_start, 0, 45, radius=1, options=\"dashed\")\ntikz.node(arc_start + (0.3, 0.5), text=\"$\\\\theta$\")\n</code></pre> <p>In the code above, we draw an arc starting at the point <code>arc_start</code> from angle 0 to 45. We define this point using  the <code>Point</code> class instead of just a Python tuple. This is useful for when we create the node object, since we  can specify the position of the node as <code>arc_start + (0.3, 0.5)</code>. </p> <p>All together, this generates the original image. The complete code is given below. </p> <pre><code>from tikzpy import TikzPicture, Point\ntikz = TikzPicture(center=True)\naxes_len = 4\n# x,y axes\norigin = (0, 0)\nx_axis = tikz.line((-axes_len, 0), (axes_len, 0), options=\"Gray!40, -&gt;\")\ny_axis = tikz.line((0, -axes_len), (0, axes_len), options=\"Gray!40, -&gt;\")\n# axes labels\ntikz.node(x_axis.end - (0.3, 0.3), text=\"$x$\")\ntikz.node(y_axis.end - (0.3, 0.3), text=\"$iy$\")\n# Cut branch\ncut_line = tikz.line((-axes_len, 0), origin, options=\"thick\")\ntikz.node(cut_line.midpoint(), text=\"Cut\", options=\"above\")\n# Line from origin\nline = tikz.line(origin, (axes_len / 3, axes_len / 3), options=\"-o\")\ntikz.node(line.end + (0.7, 0), text=\"$z = re^{i\\\\theta}$\", options=\"above\")\n# Angle arc\narc_start = Point(1, 0)\ntikz.arc(arc_start, 0, 45, radius=1, options=\"dashed\")\ntikz.node(arc_start + (0.3, 0.5), text=\"$\\\\theta$\")\ntikz.show()\n</code></pre>"},{"location":"tutorials/#neural-networks","title":"Neural Networks","text":"<p>Let's use this package to draw the typical fully connected neural network architecture diagram. </p> <p>Our goal will be to draw this image via Python code that will be maintainable, readable, and modular.</p> <p></p>"},{"location":"tutorials/#drawing-one-layer","title":"Drawing one layer","text":"<p>Firstly, we need to draw layers. We have input, hidden, and output layers to draw, but we'll first focus on the input layer. A given layer consists of a number of circles which are vertically stacked, each separated by some distance we'll call <code>node_sep</code>. These circles also have some color <code>color</code> and a mathematical symbol <code>symbol</code> inscribed. </p> <p>Thinking this through, we can use tikzpy's <code>Circle</code> class to draw the circles and the <code>Node</code> class to draw the mathematical symbols. The code below</p> <pre><code>from tikzpy import TikzPicture, Point\nnode_radius = 0.5\nnode_sep = 2\nsymbol = \"x\"\ncolor = \"green\"\ntikz = TikzPicture(center=True)\nfor idx, _ in enumerate(range(4)):\npos = (0, -node_sep * idx)\n# Draw the node\ntikz.circle(pos, radius=node_radius, options=f\"fill={color}!40\")\n# Draw the symbol\ntikz.node(pos, text=f\"${symbol}_{idx}$\")\ntikz.show()\n</code></pre> <p>produces the image </p> <p>Thus, we figured out how to draw layers. We can abstract the code above into a function that will then allow us to draw all of our input, hidden, and output layers.</p> <pre><code>def network_layer(init_pos, num_nodes, symbol, color):\nlayer_nodes = []\nfor idx, _ in enumerate(range(num_nodes)):\npos = Point(init_pos) + (0, -node_sep * idx)\n# Draw the circle\ncircle = tikz.circle(pos, radius=node_radius, options=f\"fill={color}!40\")\n# Draw the node\ntikz.node(pos, text=f\"${symbol}_{idx}$\")\nlayer_nodes.append(circle)\nreturn layer_nodes\n</code></pre> <p>In this function, we add an extra parameter <code>init_pos</code> that controls where to start drawing the network layer (necessary for when we start drawing multiple layers). We also collect the layers into a list <code>layer_nodes</code> and return it (necessary for when we draw arrows between layers). </p>"},{"location":"tutorials/#drawing-many-layers","title":"Drawing many layers","text":"<p>With the function from earlier, we can now draw many layers. For instance, here's just the input layer and the next hidden layer. </p> <pre><code>from tikzpy import TikzPicture, Point\nnode_radius = 0.5\nnode_sep = 2\nlayer_sep = 3\ninput_layer_pos = (0, 0)\nhidden_layer_pos = (layer_sep, 0)\ntikz = TikzPicture(center=True)\nnetwork_layer(input_layer_pos, 4, \"x\", \"green\")\nnetwork_layer(hidden_layer_pos, 4, \"h\", \"blue\")\ntikz.show()\n</code></pre> <p>The code above produces the image </p> <p></p>"},{"location":"tutorials/#drawing-connections","title":"Drawing connections","text":"<p>Next, we need to draw connections between these nodes. This is actually not too bad.  This package has a method <code>connect_circle_edges</code> that can draw lines between two circles. Thus the code for this step is simply </p> <pre><code>def draw_layer_connection(curr_layer, next_layer):\nfor curr_node in curr_layer:\nfor next_node in next_layer:\ntikz.connect_circle_edges(curr_node, next_node, \"-&gt;\", dst_delta=0.1)\n</code></pre> <p>To see that this works, we can use this function as below </p> <pre><code>input_layer = network_layer(input_layer_pos, 4, \"x\", \"green\")\nhidden_layer = network_layer(hidden_layer_pos, 4, \"h\", \"blue\")\ndraw_layer_connection(input_layer, hidden_layer)\n</code></pre> <p>to produce the image </p> <p></p> <p>Note, it gets a bit crowded when we draw so many arrows on a single circle. This is why we use the <code>dst_delta</code> parameter of <code>connect_circle_edges</code>. It gives a little space between arrow tips and the circles that the arrows are pointing to.</p>"},{"location":"tutorials/#drawing-the-fully-connected-network","title":"Drawing the fully connected network","text":"<p>We basically have everything we need to draw a fully connected network with variable layer sizes.  Let's take a first stab at it by writing a function  <code>draw_neural_network(layer_sizes)</code>. The parameter <code>layer_sizes</code> will be a list of integers, like  <code>[4, 3, 5, 2]</code>, which will tell the code that the first layer has 4 nodes, second layer has 3 nodes, etc. </p> <p>Towards that goal, we produce this function. We loop over <code>layer_sizes</code>. In this loop, we have logic  to control where to start drawing the layer, what to color it, what symbol to put inside of it. After the loop, we then connect all the layers. </p> <pre><code>def draw_neural_network(layer_sizes):\nlayers = []\ninit_pos = Point((0, 0))\nfor idx, size in enumerate(layer_sizes):\nx_shift = idx * layer_sep\npos = init_pos + (x_shift, 0)\nif idx == 0:\nsymbol = \"x\"\ncolor = \"green\"\nelif idx == len(layer_sizes) - 1:\nsymbol = \"y\"\ncolor = \"red\"\nelse: \nsymbol = f\"h^{{({idx})}}\"\ncolor = \"blue\"\nnodes = network_layer(pos, size, symbol, color)\nlayers.append(nodes)\nfor idx, layer in enumerate(range(len(layers) - 1)):\ndraw_layer_connection(layers[idx], layers[idx + 1])\n</code></pre> <p>Invoking this function as  <pre><code>tikz = TikzPicture(center=True)\ndraw_neural_network([4, 3, 5, 2])\ntikz.show()\n</code></pre></p> <p>Then produces the image </p> <p></p> <p>This is almost what we want but not quite. The layers aren't vertically centered. In fact, how much a layer  should be vertically offset depends on the layer size itself, i.e. the number of nodes in the layer. Once you think about  it for a second, you'll realize that the y-shift we need to invoke on a layer is given by a formula: If  <code>max_size</code> is the largest layer size, <code>size</code> is the size of the layer we want to draw, and <code>node_sep</code> is the vertical distance  between the nodes in the neural network, then</p> <p><pre><code>    y_shift = - (max_size - size) / 2 * node_sep\n</code></pre> We can the modify our function by placing this computation for the y_shift inside, when drawing the layer.</p> <pre><code>def draw_neural_network(layer_sizes):\nmax_size = max(layer_sizes)\nlayers = []\ninit_pos = Point((0, 0))\nfor idx, size in enumerate(layer_sizes):\nx_shift = idx * layer_sep\ny_shift = - (max_size - size) / 2 * node_sep\npos = init_pos + (x_shift, y_shift)\nif idx == 0:\nsymbol = \"x\"\ncolor = \"green\"\nelif idx == len(layer_sizes) - 1:\nsymbol = \"y\"\ncolor = \"red\"\nelse:\nsymbol = f\"h^{{({idx})}}\"\ncolor = \"blue\"\nnodes = network_layer(pos, size, symbol, color)\nlayers.append(nodes)\nfor idx, layer in enumerate(range(len(layers) - 1)):\ndraw_layer_connection(layers[idx], layers[idx + 1])\n</code></pre> <p>This completes the work. We can then call the function like so </p> <pre><code>tikz = TikzPicture(center=True)\ndraw_neural_network([4, 5, 3, 4, 3, 2])\ntikz.show()\n</code></pre> <p>which will produce the image </p> <p></p>"},{"location":"API_Documentation/arc/","title":"Arc","text":""},{"location":"API_Documentation/arc/#tikzpy.drawing_objects.arc.Arc","title":"Arc","text":"<p>             Bases: <code>DrawingObject</code></p> <p>A class to create arcs in the tikz environment.</p> <p>The arc class helps create arcs in Tikz. It is analagous to the TikZ code <pre><code>\\draw &lt;center&gt; arc (&lt;start_angle&gt;:&lt;end_angle&gt;:&lt;radius&gt;);\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>center</code> <p>Pair of points representing either the center of the arc or the point at which it should begin drawing (see draw_from_start).</p> required <code>start_angle</code> <code>float</code> <p>The angle (relative to the horizontal) of the start of the arc</p> required <code>end_angle</code> <code>float</code> <p>The angle (relative to the horizontal) of the end of the arc</p> required <code>radius</code> <code>float</code> <p>The radius (in cm) of the arc. If this is specified, x_radius and y_radius cannot be specified.</p> <code>None</code> <code>radians</code> <code>bool</code> <p>True if angles are in radians, False otherwise</p> <code>False</code> <code>draw_from_start</code> <code>bool</code> <p>True if position represents the point at which the arc should begin drawing. False if position represents the center of the desired arc.</p> <code>True</code>"},{"location":"API_Documentation/arc/#tikzpy.drawing_objects.arc.Arc.arc_type","title":"arc_type","text":"<pre><code>arc_type() -&gt; str\n</code></pre> <p>Determine the arc type that the user is attempting to create based on their input.</p>"},{"location":"API_Documentation/arc/#tikzpy.drawing_objects.arc.Arc.atan2_for_ellipse","title":"atan2_for_ellipse","text":"<pre><code>atan2_for_ellipse(angle: Angle) -&gt; float\n</code></pre> <p>Perform a tangent inverse operation which returns values between 0 and 2pi.</p>"},{"location":"API_Documentation/arc/#tikzpy.drawing_objects.arc.Arc.draw_start","title":"draw_start","text":"<pre><code>draw_start() -&gt; Tuple[float, float]\n</code></pre> <p>Return the point at which we should begin drawing the arc.</p>"},{"location":"API_Documentation/arc/#tikzpy.drawing_objects.arc.Arc.start_pos_circle","title":"start_pos_circle","text":"<pre><code>start_pos_circle() -&gt; Tuple[float, float]\n</code></pre> <p>Calculates the point at which the circle should begin drawing, given that the user specified what the center, radius, start, and end angles of the desired circular arc.</p>"},{"location":"API_Documentation/arc/#tikzpy.drawing_objects.arc.Arc.start_pos_ellipse","title":"start_pos_ellipse","text":"<pre><code>start_pos_ellipse() -&gt; Tuple[float, float]\n</code></pre> <p>Calculates the point at which the ellipse arc should begin drawing, given that the user specified what the center, x_radius, y_radius, start, and end angles of the desired elliptic arc.</p>"},{"location":"API_Documentation/arc/#example","title":"Example","text":"<p>Here we draw and fill a sequence of arcs. We also demonstrate <code>draw_from_start</code> set to <code>True</code> and <code>False</code>. In the code below, it is by default set to <code>True</code>. <pre><code>from tikzpy import TikzPicture\nfrom tikzpy.utils import rainbow_colors\ntikz = TikzPicture()\nfor i in range(1, 10):\nt = 4 / i\narc = tikz.arc((0, 0), 0, 180, radius=t, options=f\"fill={rainbow_colors(i)}\")\n</code></pre> This generates the image</p> <p></p> <p>If instead we would like these arcs sharing the same center, we can use the same code, but pass in <code>draw_from_start=False</code> to achieve </p> <p></p> <p>Without this option, if we were forced to specify the point at which each arc should begin drawing, we would have to calculate the x-shift for every arc and apply such a shift to keep the centers aligned. That sounds inefficient and like a waste of time to achieve something so simple, right?</p>"},{"location":"API_Documentation/arc/#methods","title":"Methods","text":"<p><code>Arc</code> has access to methods <code>.shift()</code>, <code>.scale()</code>, <code>.rotate()</code>, which behave as one would expect and takes in parameters as described before.</p>"},{"location":"API_Documentation/arc/#a-few-comments","title":"A few comments...","text":"<p>This class not only provides a wrapper to draw arcs, but it also fixes a few things that Tikz's <code>\\draw arc</code> command simply gets wrong and confuses users with.</p> <ol> <li> <p>With Tikz in TeX, to draw a circular arc one must specify <code>start_angle</code> and <code>end_angle</code>. These make sense: they are the start and end angles of the arc relative to the horizontal. To draw an elliptic arc, one must again specify <code>start_angle</code> and <code>end_angle</code>, but these actually do not represent the starting and end angles of the elliptic arc. They are the parameters <code>t</code> which parameterize the ellipse <code>(a*cos(t), b*sin(t))</code>. This makes drawing elliptic arcs inconvenient.</p> </li> <li> <p>With Tikz in TeX, the position of the arc is specified by where the arc should start drawing. However, it is sometimes easier to specify the center of the arc.</p> </li> </ol> <p>With Tikz-Python, <code>start_angle</code> and <code>end_angle</code> will always coincide with the starting and end angles, so the user will not get weird unexpected behavior. Additionally, the user can specify the arc position via its center by setting <code>draw_from_start=False</code>, but they can also fall back on the default behavior.</p>"},{"location":"API_Documentation/circle/","title":"Circle","text":""},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle","title":"Circle","text":"<p>             Bases: <code>DrawingObject</code></p> <p>A class to create circles in the tikz environment.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>Union[Tuple[float, float], Point]</code> <p>Pair of floats representing the center of the circle</p> required <code>radius</code> <code>float</code> <p>Length (in cm) of the radius</p> required <code>options</code> <code>str</code> <p>String containing the drawing options (e.g, \"Blue\")</p> <code>''</code> <code>action</code> <code>str</code> <p>The type of TikZ action to use. Default is \"draw\".</p> <code>'draw'</code>"},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle.center","title":"center  <code>property</code> <code>writable</code>","text":"<pre><code>center: Point\n</code></pre> <p>Returns a Point object representing the center of the circle.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\ncircle = tikz.circle((0,0), 1, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\ntikz.node(circle.center, text=\"O\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle.east","title":"east  <code>property</code>","text":"<pre><code>east: Point\n</code></pre> <p>Returns a Point object representing the east point on the circle.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\ncircle = tikz.circle((0,0), 1, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\ntikz.node(circle.east, text=\"$E$\", options=\"right\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle.north","title":"north  <code>property</code>","text":"<pre><code>north: Point\n</code></pre> <p>Returns a Point object representing the north point on the circle.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\ncircle = tikz.circle((0,0), 1, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\ntikz.node(circle.north, text=\"$N$\", options=\"above\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle.south","title":"south  <code>property</code>","text":"<pre><code>south: Point\n</code></pre> <p>Returns a Point object representing the south point on the circle.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\ncircle = tikz.circle((0,0), 1, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\ntikz.node(circle.south, text=\"$S$\", options=\"below\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle.west","title":"west  <code>property</code>","text":"<pre><code>west: Point\n</code></pre> <p>Returns a Point object representing the west point on the circle.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\ncircle = tikz.circle((0,0), 1, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\ntikz.node(circle.west, text=\"$W$\", options=\"left\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/circle/#tikzpy.drawing_objects.circle.Circle.point_at_arg","title":"point_at_arg","text":"<pre><code>point_at_arg(theta: float, radians: bool = False) -&gt; tuple\n</code></pre> <p>Returns the point on the circle at angle theta. Both degrees and radians can be specified.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\ncircle = tikz.circle((0,0), 1, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\ntikz.node(circle.point_at_arg(45), text=\"$\\pi/2$\", options=\"right\")\ntikz.node(circle.point_at_arg(135), text=\"$3\\pi/4$\", options=\"left\")\ntikz.node(circle.point_at_arg(270), text=\"$3\\pi/2$\", options=\"below\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/circle/#examples","title":"Examples","text":"<p>Here we create several circles, making use of the <code>action</code> parameter.  <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\ntikz.circle((0, 0), 1.25) #action=\"draw\" by default\ntikz.line((0, 0), (0, 1.25), options=\"dashed\")\ntikz.circle((3, 0), 1, options=\"thick, fill=red!60\", action=\"filldraw\")\ntikz.circle((6, 0), 1.25, options=\"Green!50\", action=\"fill\")\ntikz.show()\n</code></pre></p> <p></p> <p>We can also use circles to create the Hawaiian Earing.</p> <p><pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\nradius = 5\nfor i in range(1, 60):\nn = radius / i\ntikz.circle((n, 0), n)\ntikz.show()\n</code></pre> </p>"},{"location":"API_Documentation/ellipse/","title":"Ellipse","text":""},{"location":"API_Documentation/ellipse/#tikzpy.drawing_objects.ellipse.Ellipse","title":"Ellipse","text":"<p>             Bases: <code>DrawingObject</code></p> <p>A class to create ellipses in the tikz environment.</p> <p>The ellipse class handles ellipses in Tikz. It it analagous to the Tikz command <pre><code>\\draw[options] &lt;center&gt; ellipse (&lt;x_radius&gt; and &lt;y_radius&gt;);\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>Union[Tuple[float, float], Point]</code> <p>Position of the center of the ellipse</p> required <code>x_axis</code> <code>float</code> <p>The length (in cm) of the horizontal axis of the ellipse</p> required <code>y_axis</code> <code>float</code> <p>The length (in cm) of the vertical axis of the ellipse</p> required <code>options</code> <code>str</code> <p>TikZ options to draw with</p> <code>''</code> <code>action</code> <code>str</code> <p>The type of TikZ action to use. Default is \"draw\"</p> <code>'draw'</code>"},{"location":"API_Documentation/ellipse/#tikzpy.drawing_objects.ellipse.Ellipse.east","title":"east  <code>property</code>","text":"<pre><code>east: Point\n</code></pre> <p>Returns the east point of the ellipse.</p>"},{"location":"API_Documentation/ellipse/#tikzpy.drawing_objects.ellipse.Ellipse.north","title":"north  <code>property</code>","text":"<pre><code>north: Point\n</code></pre> <p>Returns the north point of the ellipse.</p>"},{"location":"API_Documentation/ellipse/#tikzpy.drawing_objects.ellipse.Ellipse.south","title":"south  <code>property</code>","text":"<pre><code>south: Point\n</code></pre> <p>Returns the south point of the ellipse.</p>"},{"location":"API_Documentation/ellipse/#tikzpy.drawing_objects.ellipse.Ellipse.west","title":"west  <code>property</code>","text":"<pre><code>west: Point\n</code></pre> <p>Returns the west point of the ellipse.</p>"},{"location":"API_Documentation/ellipse/#example","title":"Example","text":"<p>Here we draw and ellipse and define the major and minors axes. <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\n# x,y axes\ntikz.line((-5, 0), (5, 0), options=\"Gray!40, -&gt;\")\ntikz.line((0, -5), (0, 5), options=\"Gray!40, -&gt;\")\n# Ellipse\nellipse = tikz.ellipse(\n(0, 0), 4, 3, options=\"fill=ProcessBlue!70, opacity=0.4\", action=\"filldraw\"\n)\n# Labels\nh_line = tikz.line((0, 0), (ellipse.x_axis, 0), options=\"thick, dashed, -&gt;\")\nv_line = tikz.line((0, 0), (0, ellipse.y_axis), options=\"thick, dashed, -&gt;\")\ntikz.node(h_line.midpoint, options=\"below\", text=\"Major\")\ntikz.node(v_line.midpoint, options=\"left\", text=\"Minor\")\n</code></pre></p> <p></p>"},{"location":"API_Documentation/line/","title":"Line","text":""},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line","title":"Line","text":"<p>             Bases: <code>DrawingObject</code></p> <p>A class to create lines in the tikz environment.</p> <p>The <code>Line</code> class helps handle the creation of lines in tikz code. It is analagous to the TikZ code <pre><code>\\draw[&lt;options&gt;] &lt;start&gt; to [&lt;to_options&gt;] &lt;end&gt;;\n</code></pre> Lines in TikZ have even more features, like adding control points, and these features are accessible through the Line class.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>Union[Tuple[float, float], Point]</code> <p>Pair of floats representing the start of the line</p> required <code>end</code> <code>Union[Tuple[float, float], Point]</code> <p>Pair of floats representing the end of the line</p> required <code>options</code> <code>str</code> <p>String containing Tikz drawing options, e.g. \"Blue\"</p> <code>''</code> <code>control_pts</code> <code>List[Tuple]</code> <p>List of control points for the line</p> <code>[]</code>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.end","title":"end  <code>property</code> <code>writable</code>","text":"<pre><code>end: Point\n</code></pre> <p>Returns a Point object representing the end of the line.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\nline = tikz.line((0, 0), (4, 3), options=\"-&gt;\")\ntikz.node(line.end, text=\"End\", options=\"above\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.start","title":"start  <code>property</code> <code>writable</code>","text":"<pre><code>start: Point\n</code></pre> <p>Returns a Point object representing the start of the line. <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\nline = tikz.line((0, 0), (4, 3), options=\"-&gt;\")\ntikz.node(line.start, text=\"Start\", options=\"below\")\ntikz.show()\n</code></pre></p> <p></p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.midpoint","title":"midpoint","text":"<pre><code>midpoint() -&gt; Point\n</code></pre> <p>Returns a Point object representing the middle of the line.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\nline = tikz.line((0, 0), (4, 3), options=\"-&gt;\")\ntikz.node(line.midpoint(), text=\"$M$\", options=\"above\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.pos_at_t","title":"pos_at_t","text":"<pre><code>pos_at_t(t: float) -&gt; Point\n</code></pre> <p>Returns the point on the line that lies at \"time t\", on a scale from 0 to 1.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\nline = tikz.line((0, 0), (4, 3), options=\"-&gt;\")\ntikz.node(line.pos_at_t(0.7), text=\"0.7\", options=\"above\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.rotate","title":"rotate","text":"<pre><code>rotate(\nangle: float,\nabout_pt: Tuple[float, float] = None,\nradians: bool = False,\n) -&gt; \"Line\"\n</code></pre> <p>Rotate start, end, and control_pts. By default, the rotation is done relative to the midpoint of the line.</p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.rotate_","title":"rotate_","text":"<pre><code>rotate_(\nangle: float,\nabout_pt: Tuple[float, float] = None,\nradians: bool = False,\n) -&gt; None\n</code></pre> <p>Rotate start, end, and control_pts. By default, the rotation is done relative to the midpoint of the line.</p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.scale","title":"scale","text":"<pre><code>scale(scale: float) -&gt; 'Line'\n</code></pre> <p>Scale start, end, and control_pts.</p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.scale_","title":"scale_","text":"<pre><code>scale_(scale: float) -&gt; None\n</code></pre> <p>Scale start, end, and control_pts.</p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.shift","title":"shift","text":"<pre><code>shift(xshift: float, yshift: float) -&gt; 'Line'\n</code></pre> <p>Shift start, end, and control_pts</p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.shift_","title":"shift_","text":"<pre><code>shift_(xshift: float, yshift: float) -&gt; None\n</code></pre> <p>Shift start, end, and control_pts</p>"},{"location":"API_Documentation/line/#tikzpy.drawing_objects.line.Line.slope","title":"slope","text":"<pre><code>slope() -&gt; Optional[float]\n</code></pre> <p>Returns the slope of the line</p>"},{"location":"API_Documentation/line/#examples","title":"Examples","text":"<p>Here's an example of us using the <code>Line</code> class. <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\ntikz.line((0, 0), (4, 0), options=\"-&gt;\", control_pts=[(1, 1), (3, -1)]\n</code></pre> which generates  </p>"},{"location":"API_Documentation/node/","title":"Node","text":""},{"location":"API_Documentation/node/#tikzpy.drawing_objects.node.Node","title":"Node","text":"<p>A class to manage nodes in a tikz environment.</p> <p>This class is equivalent to the tikz code <pre><code>\\node[&lt;options&gt;] at (&lt;position&gt;) {&lt;text&gt;};\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>tuple) </code> <p>Pair of floats representing the location of the node</p> required <code>options</code> <code>str) </code> <p>String containing node options (e.g., \"above\")</p> <code>''</code> <code>text</code> <code>str</code> <p>Text that will be displayed with the node; can use dollar signs $ for LaTeX</p> <code>''</code>"},{"location":"API_Documentation/node/#tikzpy.drawing_objects.node.Node.position","title":"position  <code>property</code> <code>writable</code>","text":"<pre><code>position\n</code></pre> <p>Returns a Point object representing the position of the node. This attribute is modifiable.</p>"},{"location":"API_Documentation/node/#tikzpy.drawing_objects.node.Node.__deepcopy__","title":"__deepcopy__","text":"<pre><code>__deepcopy__(memo: dict) -&gt; Node\n</code></pre> <p>Creates a deep copy of a class object. This is useful since in our classes, we chose to set our methods to modify objects, but not return anything.</p>"},{"location":"API_Documentation/node/#tikzpy.drawing_objects.node.Node.copy","title":"copy","text":"<pre><code>copy(**kwargs: dict) -&gt; Node\n</code></pre> <p>Allows one to simultaneously make a (deep) copy of a drawing object and modify attributes of the drawing object in one step.</p>"},{"location":"API_Documentation/node/#examples","title":"Examples","text":"<p>Here we use some nodes to label a figure explaining the logarithm branch cut <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\n# x,y axes\ntikz.line((-4, 0), (4, 0), options=\"Gray!40, -&gt;\")\ntikz.line((0, -4), (0, 4), options=\"Gray!40, -&gt;\")\n# Cut\ntikz.line((-4, 0), (0, 0), options=\"thick\")\n# Line out\ntikz.line((0, 0), (1.414, 1.414), options=\"-o\")\ntikz.arc((1, 0), 0, 45, radius=1, options=\"dashed\")\n# Labels\ntikz.node((3.6, -0.2), text=\"$x$\")\ntikz.node((-0.24, 3.53), text=\"$iy$\")\ntikz.node((1.3, 0.4), text=\"$\\\\theta$\")\ntikz.node((2.1, 1.7), text=\"$z = re^{i\\\\theta}$\")\ntikz.node((-2, 0.3), text=\"Cut\")\n</code></pre> which produces </p> <p>Here's another example of usings nodes to illustrate the concept of a multivariable function. <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\narrow_len = 2\nbox_width = 2\n# Lines and rectangles\ninput_arrow = tikz.line((0, 0), (arrow_len, 0), options=\"-&gt;\")\nbox = tikz.rectangle_from_west(input_arrow.end, width=box_width, height=1)\noutput_arrow = tikz.line(box.east, box.east + (arrow_len, 0), options=\"-&gt;\")\n# Labels\ntikz.node((-1.2, 0), text=\"$(x_1, \\dots, x_n)$\")\ntikz.node(input_arrow.midpoint() + (0, 0.3), text=\"input\")\ntikz.node(box.center, text=\"$f$\")\ntikz.node(output_arrow.midpoint() + (0, 0.3), text=\"output\")\ntikz.node((7.3, 0), text=\"$f(x_1, \\dots, x_n)$\")\ntikz.show()\n</code></pre></p> <p></p>"},{"location":"API_Documentation/plot_coordinates/","title":"PlotCoordinates","text":""},{"location":"API_Documentation/plot_coordinates/#tikzpy.drawing_objects.plotcoordinates.PlotCoordinates","title":"PlotCoordinates","text":"<p>             Bases: <code>DrawingObject</code></p> <p>A class to manage plots in a tikz environment.</p> <p>The PlotCoordinates class is used to represent the plot_coordinates functionality in TikZ. It is analagous to the TikZ command <pre><code>\\draw plot[&lt;options&gt;] coordinates{ &lt;points&gt; };\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>str) </code> <p>String containing drawing options (e.g., \"Blue\")</p> <code>''</code> <code>plot_options</code> <code>str) </code> <p>String containing the plot options (e.g., \"smooth cycle\")</p> <code>''</code> <code>points</code> <code>list) </code> <p>A list of points to be drawn</p> required"},{"location":"API_Documentation/plot_coordinates/#tikzpy.drawing_objects.plotcoordinates.PlotCoordinates.center","title":"center  <code>property</code>","text":"<pre><code>center: Point\n</code></pre> <p>Calculates the geometric center (centroid) of a collection of points.</p> <p>This property computes the arithmetic mean of the x and y coordinates of all points in the collection. The result is a new Point object representing the centroid of these points.</p> <p>Returns:</p> Name Type Description <code>Point</code> <code>Point</code> <p>A Point object representing the geometric center of the collection of points.</p>"},{"location":"API_Documentation/plot_coordinates/#tikzpy.drawing_objects.plotcoordinates.PlotCoordinates.add_point","title":"add_point","text":"<pre><code>add_point(x, y)\n</code></pre> <p>Adds a new point to the points list.</p> <p>This method creates a new Point instance with the specified x and y coordinates, and appends it to the <code>points</code> attribute of the class.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>int / float</code> <p>The x-coordinate of the point.</p> required <code>y</code> <code>int / float</code> <p>The y-coordinate of the point.</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"API_Documentation/plot_coordinates/#examples","title":"Examples","text":"<p>Introducing examples of <code>PlotCoordinates</code> gives us an opportunity to illustrate the optional parameter <code>action</code>. By default, <code>action</code> is <code>\"draw\"</code> (analogous to <code>\\draw</code> in Tikz) so the code below <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\npoints = [(2, 2), (4, 0), (1, -3), (-2, -1), (-1, 3)]\nplot = tikz.plot_coordinates(points) # action=\"draw\" by default\nplot.plot_options = \"smooth cycle, tension = 0.5\"\n</code></pre> produces the image </p> <p></p> <p>Alternatively we can set <code>action = \"fill\"</code> (analogous to <code>\\fill</code> in Tikz) as in the code below <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\npoints = [(2, 2), (4, 0), (1, -3), (-2, -1), (-1, 3)]\nplot = tikz.plot_coordinates(points, options=\"Blue\", action=\"fill\")\nplot.plot_options = \"smooth cycle, tension = 0.5\"\n</code></pre> to produce the image</p> <p></p> <p>If we want both, we can set <code>action = \"filldraw\"</code> (analogous to <code>\\filldraw</code> in Tikz) <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\npoints = [(2, 2), (4, 0), (1, -3), (-2, -1), (-1, 3)]\nplot = tikz.plot_coordinates(points, options=\"Blue\", action=\"filldraw\")\nplot.options = \"fill=ProcessBlue!50\"\nplot.plot_options = \"smooth cycle, tension = 0.5\"\n</code></pre> which produces.  </p> <p>Finally, we can set <code>action = \"path\"</code> (analogous to <code>\\path</code> in Tikz), but as one would expect this doesn't draw anything. </p> <p><code>PlotCoordinates</code> has methods <code>.shift()</code>, <code>.scale</code>, and <code>.rotate</code>, similar to the class <code>Line</code>, and the parameters behave similarly. These methods are more interestingly used on <code>PlotCoordinates</code> than on <code>Line</code>. For example, the code <pre><code>import tikzpy\ntikz = tikzpy.TikzPicture()\npoints = [(14.4, 3.2), (16.0, 3.6), (16.8, 4.8), (16.0, 6.8), (16.4, 8.8), (13.6, 8.8), (12.4, 7.6), (12.8, 5.6), (12.4, 3.6)]\nfor i in range(0, 20):\noptions = f\"fill = {rainbow_colors(i)}, opacity = 0.7\"\n# Requires \\usetikzlibrary{hobby} here\nplot_options = \"smooth, tension=.5, closed hobby\"\nplot = tikz.plot_coordinates(points, options, plot_options)\nplot.scale((20 - i) / 20) # Shrink it \nplot.rotate(15 * i) # Rotate it\n</code></pre> generates the image</p> <p></p>"},{"location":"API_Documentation/point/","title":"Point","text":""},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point","title":"Point","text":"<p>A class to handle points for TikzPy.</p> <p>The Point class is how TikzPy handles coordinates. All drawing objects, like Line and Circle, use the Point class under the hood.</p> <p>The Point class is designed to perform arithmetic with instances of itself and with Python tuples. The constructor accepts can either accept two numeric arguments, a single tuple of floats argument, or a single Point object.</p> <p>Parameters:</p> Name Type Description Default <code>first_arg</code> <code>Union[float, Number, tuple, Point]</code> <p>A number, a tuple, or Point object.</p> required <code>second_arg</code> <code>Union[float, Number, None]</code> <p>A number, in the case of a 2D point, or None.</p> <code>None</code> <code>third_arg</code> <code>Union[float, Number, None]</code> <p>A number, in the case of a 3D point, or None.</p> <code>None</code>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.distance","title":"distance","text":"<pre><code>distance(other_point)\n</code></pre> <p>Calculates the distance between two points.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.rotate","title":"rotate","text":"<pre><code>rotate(\nangle: float,\nabout_pt: Union[Tuple[float, float], Point],\nradians: bool = False,\n) -&gt; Point\n</code></pre> <p>Returns a point that is rotated about another point.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.rotate_","title":"rotate_","text":"<pre><code>rotate_(\nangle: float,\nabout_pt: Union[Tuple[float, float], Point],\nradians: bool = False,\n) -&gt; None\n</code></pre> <p>Rotate the point about another point. This performs an in-place operation.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.scale","title":"scale","text":"<pre><code>scale(scale: float) -&gt; Point\n</code></pre> <p>Returns a point scaled by the given scale.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.scale_","title":"scale_","text":"<pre><code>scale_(scale: float) -&gt; None\n</code></pre> <p>Scale the point given the scale. This performs an in-place operation.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.shift","title":"shift","text":"<pre><code>shift(\nxshift: float,\nyshift: float,\nzshift: Optional[float] = None,\n) -&gt; Point\n</code></pre> <p>Returns a point translated by x, y, z offsets.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.shift_","title":"shift_","text":"<pre><code>shift_(\nxshift: float,\nyshift: float,\nzshift: Optional[float] = None,\n) -&gt; None\n</code></pre> <p>Translate the point via x, y offsets. This performs an in-place operation.</p>"},{"location":"API_Documentation/point/#tikzpy.drawing_objects.point.Point.to_tuple","title":"to_tuple","text":"<pre><code>to_tuple() -&gt; Tuple\n</code></pre> <p>Return a tuple of the x, y data.</p>"},{"location":"API_Documentation/point/#examples","title":"Examples","text":"<p>The <code>Point</code> class can be instantiated from a tuple or at least two <code>Number</code>s. One can also represent a point in 3D with this class.</p> <p><pre><code>&gt;&gt;&gt; from tikzpy import Point\n&gt;&gt;&gt; my_point = Point(-1, 2)\n&gt;&gt;&gt; my_point.x\n-1\n&gt;&gt;&gt; my_point.y\n2\n</code></pre> You can also perform arithmetic with <code>Point</code> objects, either with other <code>Point</code> objects or with Python tuples. For example, the following are all valid. <pre><code>&gt;&gt;&gt; my_point + (1, 1)  # Add it to another tuple\nPoint(0, 3)\n&gt;&gt;&gt; my_point + Point(2, 2)  # Add it with another point object\nPoint(1, 4)\n&gt;&gt;&gt; 2 * my_point  # Can also do my_point * 2 \nPoint(-2, 4)\n&gt;&gt;&gt; my_point / 3 \nPoint(-0.33333333, 0.666666666)\n</code></pre></p> <p>This allows you to write things like <pre><code>&gt;&gt;&gt; circle = tikz.circle((0,0), radius=3)\n&gt;&gt;&gt; circle.center += (1, 1)  # This is valid\n&gt;&gt;&gt; circle.center /= 3  # Also valid\n</code></pre> and this feature becomes quite useful in drawings that are highly complex.</p>"},{"location":"API_Documentation/rectangle/","title":"Rectangle","text":""},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle","title":"Rectangle","text":"<p>             Bases: <code>DrawingObject</code></p> <p>A class to manage rectangles in a tikz environment</p> <p>The <code>Rectangle</code> class is used to handle rectangles in TikZ. It is analagous to the TikZ code <pre><code>\\draw[&lt;options&gt;] &lt;left_corner&gt; rectangle &lt;right_corner&gt;;\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>left_corner</code> <code>tuple or Point) </code> <p>Position of the left corner</p> required <code>width</code> <code>float) </code> <p>Rectangle width</p> required <code>height</code> <code>float) </code> <p>Rectangle height</p> required <code>options</code> <code>str) </code> <p>String containing the drawing options, e.g, (\"Blue\")</p> <code>''</code> <code>action</code> <code>str) </code> <p>The type of TikZ action to use. Default is \"draw\".</p> <code>'draw'</code>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.center","title":"center  <code>property</code> <code>writable</code>","text":"<pre><code>center: Point\n</code></pre> <p>Returns the center of the rectangle.</p>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.east","title":"east  <code>property</code> <code>writable</code>","text":"<pre><code>east: Point\n</code></pre> <p>Returns the east point of the rectangle.</p>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.left_corner","title":"left_corner  <code>property</code> <code>writable</code>","text":"<pre><code>left_corner: Point\n</code></pre> <p>Returns the left corner of the rectangle. This attribute is modifiable and can be set.</p>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.north","title":"north  <code>property</code> <code>writable</code>","text":"<pre><code>north: Point\n</code></pre> <p>Returns the north point of the rectangle.</p>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.right_corner","title":"right_corner  <code>property</code>","text":"<pre><code>right_corner: Point\n</code></pre> <p>Returns the right corner of the rectangle.</p>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.south","title":"south  <code>property</code> <code>writable</code>","text":"<pre><code>south: Point\n</code></pre> <p>Returns the south point of the rectangle.</p>"},{"location":"API_Documentation/rectangle/#tikzpy.drawing_objects.rectangle.Rectangle.west","title":"west  <code>property</code> <code>writable</code>","text":"<pre><code>west: Point\n</code></pre> <p>Returns the west point of the rectangle.</p>"},{"location":"API_Documentation/rectangle/#example","title":"Example","text":"<p>Rectangles are often used as a background to many figures; in this case,  we create a fancy colored background.</p> <pre><code>from tikzpy import TikzPicture, Rectangle\nimport math\ntikz = TikzPicture(center=True)\nyellow_box: Rectangle = tikz.rectangle_from_center((0, 0), width=7, height=5, options=\"rounded corners, Yellow!30\",action=\"filldraw\")\n# Params\nr = 2\nn_nodes = 7\nnodes = []\n# Draw the nodes\nfor i in range(1, n_nodes + 1):\nangle = 2 * math.pi * i / n_nodes\nx = r * math.cos(angle)\ny = r * math.sin(angle)\nnode = tikz.node((x, y), text=f\"$A_{{{i}}}$\")\nnodes.append(node)\n# Draw the lines between the nodes\nfor i in range(len(nodes)):\nstart = nodes[i].position\nend = nodes[(i + 1) % len(nodes)].position\ntikz.line(start, end, options=\"-&gt;, shorten &gt;= 10pt, shorten &lt;=10pt\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/scope/","title":"Scope","text":""},{"location":"API_Documentation/scope/#tikzpy.tikz_environments.scope.Scope","title":"Scope","text":"<p>             Bases: <code>TikzEnvironment</code></p> <p>A class to create a scope environment.</p> <p>The <code>Scope</code> class is meant to handle the <code>scope</code> environment in TikZ. Scoping is useful as it can be used to nest a set of commands in a TikZ picture, or it can be used in conjunction with the TikZ <code>clip</code> command to \"clip out\" drawings.</p> <p>This class is analagous to the TikZ command <pre><code>\\begin{scope}\n    ...\n\\end{scope}\n</code></pre></p>"},{"location":"API_Documentation/scope/#tikzpy.tikz_environments.scope.Scope.code","title":"code  <code>property</code>","text":"<pre><code>code: str\n</code></pre> <p>A string contaning the drawing_objects in the scope.</p>"},{"location":"API_Documentation/scope/#tikzpy.tikz_environments.scope.Scope.append","title":"append","text":"<pre><code>append(*args: List[DrawingObject]) -&gt; None\n</code></pre> <p>Append a drawing object to the scope statement</p>"},{"location":"API_Documentation/scope/#tikzpy.tikz_environments.scope.Scope.clip","title":"clip","text":"<pre><code>clip(draw_obj: DrawingObject, draw: bool = False) -&gt; None\n</code></pre> <p>Clip a drawing object in the scope environment</p>"},{"location":"API_Documentation/scope/#tikzpy.tikz_environments.clip.Clip","title":"Clip","text":"<p>A class for a clipping code statement.</p> <p>This class is used to clip a single drawing object draw_obj. It is meant to be used in conjunction with the Scope class. It is analagous to the tikz code</p> <pre><code>\\clip ... # some drawing object\n</code></pre>"},{"location":"API_Documentation/tikz_picture/","title":"TikzPicture","text":""},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture","title":"TikzPicture","text":"<p>             Bases: <code>TikzEnvironment</code></p> <p>A class for managing a Tikzpicture environment and associated tex files with tikz code.</p> <p>The TikzPicture class acts a canvas in which users can append drawings to. In the background, the TikzPicture manages the creation of the tikz code.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>bool</code> <p>True/False if one wants to center their Tikz code</p> <code>False</code> <code>options</code> <code>str</code> <p>A list of options for the Tikz picture</p> <code>''</code>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.add_command","title":"add_command","text":"<pre><code>add_command(tikz_statement: str) -&gt; TikzCommand\n</code></pre> <p>Add a string of valid Tikz code into the Tikz environment.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.add_option","title":"add_option","text":"<pre><code>add_option(option: str) -&gt; None\n</code></pre> <p>Add an option to the set of options.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.add_styles","title":"add_styles","text":"<pre><code>add_styles(*styles: List[TikzStyle]) -&gt; None\n</code></pre> <p>Add a TikzStyle object to the environment.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.arc","title":"arc","text":"<pre><code>arc(\nposition: Union[Tuple[float, float], Point],\nstart_angle: float,\nend_angle: float,\nradius: float = None,\nx_radius: float = None,\ny_radius: float = None,\noptions: str = \"\",\nradians: bool = False,\ndraw_from_start: bool = True,\naction: str = \"draw\",\n) -&gt; Arc\n</code></pre> <p>Draws an arc by creating an instance of the Arc class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.circle","title":"circle","text":"<pre><code>circle(\ncenter: Union[Tuple[float, float], Point],\nradius: float,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Circle\n</code></pre> <p>Draws a circle by creating an instance of the Circle class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.code","title":"code","text":"<pre><code>code() -&gt; str\n</code></pre> <p>Returns a string contaning the generated Tikz code.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.compile","title":"compile","text":"<pre><code>compile(\npdf_destination: Optional[str] = None,\nquiet: bool = True,\n) -&gt; Path\n</code></pre> <p>Compiles the Tikz code and returns a Path to the final PDF. If no file path is provided, a default value of \"tex_file.pdf\" will be used.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_destination</code> <code>str</code> <p>The file path of the compiled pdf.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Parameter to silence latexmk.</p> <code>True</code>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.connect_circle_edges","title":"connect_circle_edges","text":"<pre><code>connect_circle_edges(\ncircle_a, circle_b, options=\"\", src_delta=0, dst_delta=0\n) -&gt; Line\n</code></pre> <p>Draws a line connecting the edges of two circles. This is useful for drawing graphs, diagrams, neural networks, etc.</p> <p><pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture()\nradius = 0.3\ncenters = [(0,2), (2, 4), (4,2), (6,5)]\ncircles = [tikz.circle(x, radius, options=\"ProcessBlue!50\", action=\"filldraw\") for x in centers]\nfor idx in range(len(circles) - 1):\nline = tikz.connect_circle_edges(circles[idx], circles[idx + 1])\nline.options = \"-&gt;\"\ntikz.show()\n</code></pre> </p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.draw","title":"draw","text":"<pre><code>draw(*args: List[DrawingObject]) -&gt; None\n</code></pre> <p>Add an arbitrary sequence of drawing objects.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.draw_segments","title":"draw_segments","text":"<pre><code>draw_segments(points, circular=True, options='')\n</code></pre> <p>Given a list of points, draw a sequence of line segments between the points.</p> <pre><code>from tikzpy import TikzPicture\ntikz = TikzPicture(center=True)\ncircle = tikz.circle((0,0), 3, options=\"fill=ProcessBlue!30\", action=\"filldraw\")\nnum_points = 7\npoints = []\nfor num in range(num_points):\nangle = 360/num_points*num\npoints.append(circle.point_at_arg(angle))\ndraw_segments(tikz, points, options=\"thick\")\ntikz.show()\n</code></pre> <p></p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.ellipse","title":"ellipse","text":"<pre><code>ellipse(\ncenter: Union[Tuple[float, float], Point],\nx_axis: float,\ny_axis: float,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Ellipse\n</code></pre> <p>Draws an ellipse by creating an instance of the Ellipse class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.line","title":"line","text":"<pre><code>line(\nstart: Union[Tuple[float, float], Point],\nend: Union[Tuple[float, float], Point],\noptions: str = \"\",\nto_options: str = \"\",\ncontrol_pts: list = [],\naction: str = \"draw\",\n) -&gt; Line\n</code></pre> <p>Draws a line by creating an instance of the Line class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.node","title":"node","text":"<pre><code>node(\nposition: Union[Tuple[float, float], Point],\noptions: str = \"\",\ntext: str = \"\",\n) -&gt; Node\n</code></pre> <p>Draws a node by creating an instance of the Node class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.plot_coordinates","title":"plot_coordinates","text":"<pre><code>plot_coordinates(\npoints: Union[List[tuple], List[Point]],\noptions: str = \"\",\nplot_options: str = \"\",\naction: str = \"draw\",\n) -&gt; PlotCoordinates\n</code></pre> <p>Draws a plot coordinates statement by creating an instance of the PlotCoordinates class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.plot_relative_coordinates","title":"plot_relative_coordinates","text":"<pre><code>plot_relative_coordinates(\npoints: Union[List[tuple], List[Point]],\noptions: str = \"\",\nplot_options: str = \"\",\naction: str = \"draw\",\n) -&gt; PlotCoordinates\n</code></pre> <p>Draws a (relative) plot coordinates statement by creating an instance of the PlotCoordinates class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.rectangle","title":"rectangle","text":"<pre><code>rectangle(\nleft_corner: Union[Tuple[float, float], Point],\nwidth: float = 0,\nheight: float = 0,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Rectangle\n</code></pre> <p>Draws a rectangle by creating an instance of the Rectangle class.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.rectangle_from_east","title":"rectangle_from_east","text":"<pre><code>rectangle_from_east(\neast_point: Union[Tuple[float, float], Point],\nwidth: float = 0,\nheight: float = 0,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Rectangle\n</code></pre> <p>Creates and draws a rectangle using the east point as a reference.</p> <p>This method allows for the creation of a rectangle by specifying its east point, width, and height.</p> <p>Parameters:</p> Name Type Description Default <code>east_point</code> <code>Union[Tuple[float, float], Point]</code> <p>The east point of the rectangle. This can be a tuple of floats representing the coordinates, or a Point object.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle. Defaults to 0.</p> <code>0</code> <code>height</code> <code>float</code> <p>The height of the rectangle. Defaults to 0.</p> <code>0</code> <code>options</code> <code>str</code> <p>A string representing additional options for the rectangle's creation or manipulation. Defaults to an empty string.</p> <code>''</code> <code>action</code> <code>str</code> <p>Specifies the TikZ action to be taken with the rectangle once created. Defaults to \"draw\".</p> <code>'draw'</code>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.rectangle_from_north","title":"rectangle_from_north","text":"<pre><code>rectangle_from_north(\nnorth_point: Union[Tuple[float, float], Point],\nwidth: float = 0,\nheight: float = 0,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Rectangle\n</code></pre> <p>Creates and draws a rectangle using the northernmost point as a reference.</p> <p>This method allows for the creation of a rectangle by specifying its north point, width, and height.</p> <p>Parameters:</p> Name Type Description Default <code>north_point</code> <code>Union[Tuple[float, float], Point]</code> <p>The northernmost point of the rectangle. This can be a tuple of floats representing the coordinates, or a Point object.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle. Defaults to 0.</p> <code>0</code> <code>height</code> <code>float</code> <p>The height of the rectangle. Defaults to 0.</p> <code>0</code> <code>options</code> <code>str</code> <p>A string representing additional options for the rectangle's creation or manipulation. Defaults to an empty string.</p> <code>''</code> <code>action</code> <code>str</code> <p>Specifies the TikZ action to be taken with the rectangle once created. Defaults to \"draw\".</p> <code>'draw'</code>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.rectangle_from_south","title":"rectangle_from_south","text":"<pre><code>rectangle_from_south(\nsouth_point: Union[Tuple[float, float], Point],\nwidth: float = 0,\nheight: float = 0,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Rectangle\n</code></pre> <p>Creates and draws a rectangle using the south point as a reference.</p> <p>This method allows for the creation of a rectangle by specifying its south point, width, and height.</p> <p>Parameters:</p> Name Type Description Default <code>south_point</code> <code>Union[Tuple[float, float], Point]</code> <p>The south point of the rectangle. This can be a tuple of floats representing the coordinates, or a Point object.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle. Defaults to 0.</p> <code>0</code> <code>height</code> <code>float</code> <p>The height of the rectangle. Defaults to 0.</p> <code>0</code> <code>options</code> <code>str</code> <p>A string representing additional options for the rectangle's creation or manipulation. Defaults to an empty string.</p> <code>''</code> <code>action</code> <code>str</code> <p>Specifies the TikZ action to be taken with the rectangle once created. Defaults to \"draw\".</p> <code>'draw'</code>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.rectangle_from_west","title":"rectangle_from_west","text":"<pre><code>rectangle_from_west(\nwest_point: Union[Tuple[float, float], Point],\nwidth: float = 0,\nheight: float = 0,\noptions: str = \"\",\naction: str = \"draw\",\n) -&gt; Rectangle\n</code></pre> <p>Creates and draws a rectangle using the west point as a reference.</p> <p>This method allows for the creation of a rectangle by specifying its west point, width, and height.</p> <p>Parameters:</p> Name Type Description Default <code>west_point</code> <code>Union[Tuple[float, float], Point]</code> <p>The west point of the rectangle. This can be a tuple of floats representing the coordinates, or a Point object.</p> required <code>width</code> <code>float</code> <p>The width of the rectangle. Defaults to 0.</p> <code>0</code> <code>height</code> <code>float</code> <p>The height of the rectangle. Defaults to 0.</p> <code>0</code> <code>options</code> <code>str</code> <p>A string representing additional options for the rectangle's creation or manipulation. Defaults to an empty string.</p> <code>''</code> <code>action</code> <code>str</code> <p>Specifies the TikZ action to be taken with the rectangle once created. Defaults to \"draw\".</p> <code>'draw'</code>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.set_tdplotsetmaincoords","title":"set_tdplotsetmaincoords","text":"<pre><code>set_tdplotsetmaincoords(theta: float, phi: float) -&gt; None\n</code></pre> <p>Specify the viewing angle for 3D.</p> <p>theta: The angle (in degrees) through which the coordinate frame is rotated about the x axis. phi: The angle (in degrees) through which the coordinate frame is rotated about the z axis.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.show","title":"show","text":"<pre><code>show(quiet: bool = False) -&gt; None\n</code></pre> <p>Compiles the Tikz code and displays the pdf to the user. Set quiet=True to shut up latexmk. This should either open the PDF viewer on the user's computer with the graphic, or open the PDF in the user's browser.</p>"},{"location":"API_Documentation/tikz_picture/#tikzpy.tikz_environments.tikz_picture.TikzPicture.tikzset","title":"tikzset","text":"<pre><code>tikzset(\nstyle_name: str, style_rules: TikzStyle\n) -&gt; TikzStyle\n</code></pre> <p>Create and add a TikzStyle object with name \"style_name\" and tikzset syntax \"style_rules\"</p>"}]}